#   Copyright
#
#	Copyright (C) 2011-2012 Jari Aalto
#
#   License
#
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#   Description
#
#	To learn what TOP LEVEL sections to use in manual pages,
#	see POSIX/Susv standard and "Utility Description Defaults" at
#	http://www.opengroup.org/onlinepubs/009695399/utilities/xcu_chap01.html#tag_01_11
#
#	This manual page in Perl POD format. Read more at
#	http://perldoc.perl.org/perlpod.html or run command:
#
#	    perldoc perlpod
#
#	To check the syntax:
#
#	    podchecker *.pod
#
#	To create manual:
#
#	    pod2man FILE.N.pod > FILE.N

=pod

=head1 NAME

restricted-shell-create - create a restricted shell environment using rbash

=head1 SYNOPSIS

  restricted-shell-create [options] <login name> <list of allowed commands>

=head1 DESCRIPTION

Program to create a restricted shell environment using
C</bin/rbash>. Creates login name if it does not exist.

Program can only be run by root and it must be run on a host,
that has direct access to the user's home; not on a host that NFS
mounts /home. The list of allowed commands must be along I<PATH> or
written using full path name.

Remember that the acocunt is only as secure as the choice of
commands. Don't let anyone run commands that would allow escaping
to a shell. like editors (emacs, vi) or mail programs (mutt) etc.

=head2 Further Reading

For real hard security, remember: "honestly a restricted shells
are depreciated, you should be using tools such as apparmor,
selinux, grsecurity or virtualization as it is rather trivial to
break out of rbash."

To restrict access from certain hosts and private ssh keys. See
Linux Journal article I<Paranoid Penguin - Managing SSH for
Scripts and cron Jobs> at
<http://www.linuxjournal.com/magazine/paranoid-penguin-managing-ssh-scripts-and-cron-jobs?page=0,0>

A good article about overwiev to securing logins can be foudn at
<http://www.symantec.com/connect/articles/restricting-unix-users>.

=head1 options

=over 4

=item b<-d, --homeroot>

The mount directory of system home. defaults to /home.

=item b<-d, --debug>

Activate shell debug.

=item b<-f, --force>

Allow destructive changes, like overwriting files while copying
bash startup to user's home directory.

=item b<-g, --group>

If provided, passed to b<usedadd(1)> command if user does not
exist.

=item b<-h, --help>

Display short help.

=item b<-i, --init>

Clean initialization. delete all previous commands from user's
c<bin/> directory before creating suymlinks to the allowed
commands.

=item b<-o, --chown USER:GROUP>

Set permissions to USER:GROUP. Defaults to I<root:root>.

=item b<-s, --shell program>

Set program to user's b<--user> shell. Defualts to c</bin/rbash>.

=item b<-t, --test>

Show what commands would be run. do not actually do anything.

=item b<-v, --verbose>

Be verbose.

=item b<-v, --version>

Display version information.

=back

=head1 examples

Create user dummy, allow it to run commands date(1), ls(1) and
ssh(1) but don't actually do anything:

    restricted-shell-create --test dummy date ls ssh

Same, but clean all other command that user may have had access
to from last setup:

    restricted-shell-create --test --init dummy date ls ssh

Overwrite account files while creating the restricted shell
environment:

    restricted-shell-create --force --init dummy date ls ssh

Make your personal modifications as needed, like allowing only
ssh key based access. The authorized_keys file is a file that
contains the public identities, or public keys, of users who can
log in to the account by using public key authentication ::

    cd ~dummy
    $EDITOR .ssh/authorize_keys

    # OR, append key to the host remotedly
    cat ~/.ssh/key.pub | ssh -l root HOST "cd ~dummy; cat >> .ssh/authorized_keys"

A typical restricted case for restricted shell is to allow users
to access Subversion Version Control Server at remote host in a
secure manner. The server process typicaly runs on account I<svn>
so create restricted login. For more information see SVN Book
section I<Tunneling over SSH> at
<http://svnbook.red-bean.com/nightly/en/index.html>.

    # ... AT SVN SERVER

    restricted-shell-create --init svn svnserve
    cd ~svn
    chown -R root:svn .bash* .ssh/

    cd .ssh

    # Make a unique ssh key for each user
    ssh-keygen -t dsa -f user1
    ssh-keygen -t dsa -f user2

    # Add keys
    cat user1.pub user2.pub >> authorized_keys

    # Edit each user's key like this (all in one line):
    # command=”svnserve --root=/var/svn/project/ --tunnel –-tunnel-user=user1″,no-port-forwarding,no-agent-forwarding,no-X11-forwarding,no-pty <KEY DATA>

    $EDITOR authorized_keys

    # ... AT SVN CLIENT SIDE

    $EDITOR $HOME/.subversion/config

    # Under the "[tunnels]". The svn URLs are like "svn+secure://HOST/dir"
    # -l = Log in as "svn"
    # -i = use specific key

    secure = /usr/bin/ssh -l svn -i /home/user1/.ssh/user1

=head1 ENVIRONMENT

None.

=head1 FILES

Directory C</ust/share/restricted-shell-rbash> contains template
field. These are not user editable as they are overwritten by
next install. If you want to supply your own, copy them over to
user directory after this program.

=head1 STANDARDS

None.

=head1 AVAILABILITY

http://freecode.com/projects/restricted-shell-rbash

=head1 SEE ALSO

bash(1)
rbash(1)
ssh(1)

=head1 AUTHORS

Program was written by <jari.aalto@cante.net>

Released under license GNU GPL version 2 or (at your option) any
later version. For more information about license, visit
<http://www.gnu.org/copyleft/gpl.html>.

=cut
