NAME
    restricted-shell-create - create a restricted shell environment using
    rbash

SYNOPSIS
      restricted-shell-create [options] <login name> [list of commands]

DESCRIPTION
    Program to create a restricted shell environment using "/bin/rbash".
    Creates login name if it does not exist. If no password is specified for
    the login, default is set to *password*.

    Program can only be run by root and it must be run on a host, that has
    direct access to the user's home; not on a host that NFS mounts /home.
    The list of allowed commands must be along *PATH* or written using full
    path names.

    Remember that the acocunt is only as secure as the choice of commands.
    Don't let anyone run commands that would allow escaping to a shell, like
    editors (emacs, vi) or mail programs (mutt) etc.

  Further Reading
    For real hard security, someone reminded in the Net: "honestly a
    restricted shells are depreciated, you should be using tools such as
    apparmor, selinux, grsecurity or virtualization as it is rather trivial
    to break out of rbash."

    In Debian systems, see package *jailer* to create chrooted environments.

    To restrict access from certain hosts and private ssh keys. See Linux
    Journal article *Paranoid Penguin - Managing SSH for Scripts and cron
    Jobs* at
    <http://www.linuxjournal.com/magazine/paranoid-penguin-managing-ssh-scri
    pts-and-cron-jobs?page=0,0>

    A good article about overwiev to securing logins can be found at
    <http://www.symantec.com/connect/articles/restricting-unix-users>.

OPTIONS
    -a, --attributes
        Use extended file system attributes provided by chattr(1) command to
        protect installed files better from user's modification attempts. If
        this options is used, make sure that following conditions are met:

        * (1) You're running at the host that physically has the home disk
          for the $USER. Using this option on a host that only has access to
          the /home share through networked file system, like NFS, will
          fail.

        * (2) the File System supports chattr(1) command. E.g. ext* file
          systems do, but others may not.

    -d, --homeroot
        The absolute path of system home directory root. defaults to /home.

    -D, --debug
        Activate shell debug.

    -f, --force
        Allow destructive changes, like overwriting files while copying bash
        startup to user's home directory.

    -g, --group
        If provided, passed to usedadd(1) command if user does not exist.

    -i, --init
        Clean initialization. Delete all previous commands from user's
        c<bin/> directory before creating symlinks to the allowed commands.

    -o, --chown USER:GROUP
        Set permissions to USER:GROUP. Defaults to *root:root*.

    -p, --password PASSWORD
        Set login password to PASSWORD. If this options is not set, use
        default value of *password* during call to adduser(8).

    -s, --shell PROGRAM
        Set user's shell to PROGRAM. Defualts to c</bin/rbash>.

    -t, --test
        Show what commands would be run. Do not actually do anything.

    -v, --verbose
        Be verbose.

    -v, --version
        Display version information and exit.

    -h, --help
        Display short help.

EXAMPLES
    Create user *dummy*, allow it to run commands date(1), ls(1) and ssh(1)
    but don't actually do anything:

        restricted-shell-create --test dummy date ls ssh

    Same, but clean all other command that user *dummy* may have had access
    to from last setup:

        restricted-shell-create --test --init dummy date ls ssh

    Overwrite account files for user *dummy* while creating the restricted
    shell environment:

        restricted-shell-create --force --init dummy date ls ssh

    Make your personal modifications as needed, like allowing only ssh key
    based access. The authorized_keys file is a file that contains the
    public identities, or public keys, of users who can log in to the
    account by using public key authentication:

        cd ~dummy
        $EDITOR .ssh/authorize_keys

        # OR, append key to the host remotedly
        cat ~/.ssh/key.pub | ssh -l root HOST "cd ~dummy; cat >> .ssh/authorized_keys"

    A typical case for restricted shell is to allow users to access
    Subversion Version Control Server at remote host in a secure manner. The
    server process typicaly runs on account *svn* so we create a restricted
    login below. For more information see SVN Book section *Tunneling over
    SSH* at <http://svnbook.red-bean.com/nightly/en/index.html>.

        # ... AT SVN SERVER

        restricted-shell-create --init svn svnserve
        cd ~svn
        chown -R root:svn .bash* .ssh/

        cd .ssh

        # Make a unique ssh key for each user
        ssh-keygen -t dsa -f user1
        ssh-keygen -t dsa -f user2

        # Add keys
        cat user1.pub user2.pub >> authorized_keys

        # Edit each user's key like this (all in one line):
        # command=”svnserve --root=/var/svn/project/ --tunnel –-tunnel-user=user1″,no-port-forwarding,no-agent-forwarding,no-X11-forwarding,no-pty <KEY DATA>

        $EDITOR authorized_keys

        # ... AT SVN CLIENT SIDE

        $EDITOR $HOME/.subversion/config

        # Under the "[tunnels]". The svn URLs are like "svn+secure://HOST/dir"
        # -l = Log in as "svn"
        # -i = use specific key

        secure = /usr/bin/ssh -l svn -i /home/user1/.ssh/user1

BUGS
    The "restricted" behavior is not handled in rbash(1) correctly if you
    su(1) to the account. See <http://bugs.debian.org/411997>. You must use
    standard login(1) to get the expected behavior.

    The utility uses getopt(1) to parse options if it available in $PATH. If
    not, due to lack of proper programing language constructs in POSIX
    shell, combining short options in form of -fi is not supported. In that
    case, use separate options like in -f -i.

ENVIRONMENT
    None.

FILES
    Directory "/ust/share/restricted-shell-rbash" contains template field.
    These are not user editable as they are overwritten by next install. If
    you want to supply your own, copy them over to user directory after this
    program.

STANDARDS
    None.

AVAILABILITY
    http://freecode.com/projects/restricted-shell-rbash

SEE ALSO
    bash(1) jailer(1) rbash(1) ssh(1) updatejail(1)

AUTHORS
    Program was written by <jari.aalto@cante.net>

    Released under license GNU GPL version 2 or (at your option) any later
    version. For more information about license, visit
    <http://www.gnu.org/copyleft/gpl.html>.

